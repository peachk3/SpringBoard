스프링게시판.txt

- DB 관련 파트
   디비 생성 / 계정준비 
   테이블 생성(설계바탕) 
   더미(dummy)데이터 생성
   
- 스프링MVC 파트
   개발에 필요한 패키지 설정/코드 규칙 설정 (ex. 클래스 이름, 변수명)
   개발 파트 분배
   테스트 동작의 구현 
   
- 화면 파트 
   jsp 페이지에서의 구현 
   템플릿 사용 
   
  
- board 테이블 생성
  
  * 의존 객체 자동 주입 : 별도의 설정없이 스프링(컨테이너)이 자동으로 의존 대상을
    객체에 주입해서 사용하능하게 만드는 것
   
   - @Inject 
   	 java에서 지원하는 어노테이션(특정 프레임워크에 비종속적)
   	 찾는 순서 : [타입] -> [@Qualifier] -> [이름] -> 주입 실패
   	 사용 범위 : 멤버변수, setter(), 생성자(), 일반 메서드
   	 
   - @Autowired
     Spring에서 지원하는 어노테이션(종속적)
     찾는 순서 : [타입] (root-context에서 비교) -> [이름] -> [@Qualifier] -> 주입 실패
     사용 범위 : 멤버변수, setter(), 생성자(), 일반 메서드
   
   - @Resource
     java에서 지원하는 어노테이션(특정 프레임워크에 비종속적)
     찾는 순서 : [이름] -> [타입] -> [@Qualifier] -> 주입 실패
     사용 범위 : 멤버변수, setter()
     
     
     @Qualifier : 객체의 별명(주입하는 객체가 하나 이상일 경우 구분용)
     
     <bean id="dataSource" 
     		class="com.zaxxer.hikari.HikariDataSource">
			...
			<qualifier value="d1"/>
	</bean>
	<bean id="dataSource" 
     		class="com.zaxxer.hikari.HikariDataSource">
			...
			<qualifier value="d2"/>
	</bean>

	@Inject
	@Autowired	@Qualifier("d1")-> qualifier value
	private DataSource ds;     
     
   
   하단 페이징처리
   
   - 시작페이지 번호 (startPage)
   	   startPage = (endPage - 블럭개수) + 1
   - 끝페이지 번호 (endPage)
       endPage = (int) (올림(페이지 번호/블럭개수) * 블럭개수)
       
       => 추가 변경(글 총 개수 < 끝 페이지)
       진짜 endPage = 올림(전체 글의 개수/페이지당 출력개수)
       
   - 전체 글의 개수 (DB조회 - count())
   - 이전 페이지(prev)
   		prev = startPage == 1? false:true;
   		prev = startPage != 1;
   		  => 두 코드 동일한 정보임
   - 다음 페이지
        next = endPage * 페이지당 출력 >= 전체 글 개수? false : true;
        next = endPage * 페이지당 출력 < 전체 글 개수;
      
   ** 총 123개 / 페이지당 10개씩 출력
      총 페이지 13 / 페이지 블럭 10개
      
   - 3페이지
     => startPage : 1, endPage : 10, next : O, prev : X
   - 10페이지
   	 => startPage : 1, endPage : 10, next : O, prev : X
   - 12페이지
     => startPage : 11, endPage : 20 -> 13, next :X, prev : O
   - 13페이지
     => startPage : 11, endPage : 20 -> 13, next :X, prev : O
     
     
   
   